// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ArmadaBot;
//
//    var objectInitMessage = ObjectInitMessage.FromJson(jsonString);

namespace ArmadaBot
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class ObjectInitMessageClass
    {
        [JsonProperty("gameObjectType", NullValueHandling = NullValueHandling.Ignore)]
        public string GameObjectType { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public Position Position { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public long? Type { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public float? Scale { get; set; }

        [JsonProperty("HP", NullValueHandling = NullValueHandling.Ignore)]
        public long? Hp { get; set; }

        [JsonProperty("maxHP", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxHp { get; set; }

        [JsonProperty("nickname", NullValueHandling = NullValueHandling.Ignore)]
        public string Nickname { get; set; }

        [JsonProperty("assets", NullValueHandling = NullValueHandling.Ignore)]
        public Assets Assets { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class Assets
    {
        [JsonProperty("spritesheet", NullValueHandling = NullValueHandling.Ignore)]
        public Spritesheet Spritesheet { get; set; }

        [JsonProperty("photo", NullValueHandling = NullValueHandling.Ignore)]
        public Photo Photo { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class Photo
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class Spritesheet
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("frameSize", NullValueHandling = NullValueHandling.Ignore)]
        public FrameSize FrameSize { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class FrameSize
    {
        [JsonProperty("fps", NullValueHandling = NullValueHandling.Ignore)]
        public long? Fps { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class Position
    {
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public long? X { get; set; }

        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public long? Y { get; set; }
    }

    public partial struct ObjectInitMessageElement
    {
        public ObjectInitMessageClass ObjectInitMessageClass;
        public string String;

        public static implicit operator ObjectInitMessageElement(ObjectInitMessageClass ObjectInitMessageClass) => new ObjectInitMessageElement { ObjectInitMessageClass = ObjectInitMessageClass };
        public static implicit operator ObjectInitMessageElement(string String) => new ObjectInitMessageElement { String = String };
    }

    public class ObjectInitMessage
    {
        public static List<ObjectInitMessageElement> FromJson(string json) => JsonConvert.DeserializeObject<List<ObjectInitMessageElement>>(json, ArmadaBot.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<ObjectInitMessageElement> self) => JsonConvert.SerializeObject(self, ArmadaBot.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ObjectInitMessageElementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ObjectInitMessageElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ObjectInitMessageElement) || t == typeof(ObjectInitMessageElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ObjectInitMessageElement { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ObjectInitMessageClass>(reader);
                    return new ObjectInitMessageElement { ObjectInitMessageClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type ObjectInitMessageElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ObjectInitMessageElement)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.ObjectInitMessageClass != null)
            {
                serializer.Serialize(writer, value.ObjectInitMessageClass);
                return;
            }
            throw new Exception("Cannot marshal type ObjectInitMessageElement");
        }

        public static readonly ObjectInitMessageElementConverter Singleton = new ObjectInitMessageElementConverter();
    }
}
